using BloomersIntegrationsCore.Domain.Entities;
using BloomersMicrovixIntegrations.LinxMicrovixWsSaida.Domain.Entities.LinxMicrovix;
using BloomersMicrovixIntegrations.LinxMicrovixWsSaida.Infrastructure.Repositorys.Base;

namespace BloomersMicrovixIntegrations.LinxMicrovixWsSaida.Infrastructure.Repositorys.LinxMicrovix
{
    public class LinxProdutosDetalhesRepository : ILinxProdutosDetalhesRepository
    {
        private readonly ILinxMicrovixRepositoryBase<LinxProdutosDetalhes> _linxMicrovixRepositoryBase;

        public LinxProdutosDetalhesRepository(ILinxMicrovixRepositoryBase<LinxProdutosDetalhes> linxMicrovixRepositoryBase) =>
            _linxMicrovixRepositoryBase = linxMicrovixRepositoryBase;

        public void BulkInsertIntoTableRaw(List<LinxProdutosDetalhes> registros, string tableName, string database)
        {
            try
            {
                var table = _linxMicrovixRepositoryBase.CreateDataTable(tableName, new LinxProdutosDetalhes().GetType().GetProperties());

                for (int i = 0; i < registros.Count(); i++)
                {
                    table.Rows.Add(registros[i].lastupdateon, registros[i].portal, registros[i].cnpj_emp, registros[i].cod_produto, registros[i].cod_barra,
                                   registros[i].quantidade, registros[i].preco_custo, registros[i].preco_venda, registros[i].custo_medio, registros[i].id_config_tributaria,
                                   registros[i].desc_config_tributaria, registros[i].despesas1, registros[i].qtde_minima, registros[i].qtde_maxima, registros[i].ipi,
                                   registros[i].timestamp, registros[i].custototal, registros[i].empresa);
                }

                _linxMicrovixRepositoryBase.BulkInsertIntoTableRaw(table, database, tableName, table.Rows.Count);
            }
            catch
            {
                throw;
            }
        }

        public async Task<string> GetParametersAsync(string tableName, string database, string parameterCol)
        {
            string sql = $@"SELECT {parameterCol} FROM [BLOOMERS_LINX].[dbo].[LinxAPIParam] (nolock) where method = '{tableName}'";

            try
            {
                return await _linxMicrovixRepositoryBase.GetParametersAsync(tableName, sql);
            }
            catch
            {
                throw;
            }
        }

        public string GetParametersNotAsync(string tableName, string database, string parameterCol)
        {
            string sql = $@"SELECT {parameterCol} FROM [BLOOMERS_LINX].[dbo].[LinxAPIParam] (nolock) where method = '{tableName}'";

            try
            {
                return _linxMicrovixRepositoryBase.GetParametersNotAsync(tableName, sql);
            }
            catch
            {
                throw;
            }
        }

        public async Task InsereRegistroIndividualAsync(LinxProdutosDetalhes registro, string tableName, string database)
        {
            string sql = @$"INSERT INTO {database}..{tableName}_raw 
                            ([lastupdateon], [portal], [cnpj_emp], [cod_produto], [cod_barra], [quantidade], [preco_custo], [preco_venda], [custo_medio],
                             [id_config_tributaria], [desc_config_tributaria], [despesas1], [qtde_minima], [qtde_maxima], [ipi], [timestamp], [custototal], 
                             [empresa]
                            ) 
                            Values 
                            (@lastupdateon, @portal, @cnpj_emp, @cod_produto, @cod_barra, @quantidade, @preco_custo, @preco_venda, @custo_medio,
                             @id_config_tributaria, @desc_config_tributaria, @despesas1, @qtde_minima, @qtde_maxima, @ipi, @timestamp, @custototal, 
                             @empresa
                            )";

            try
            {
                await _linxMicrovixRepositoryBase.InsereRegistroIndividualAsync(tableName, sql, registro);
            }
            catch
            {
                throw;
            }
        }

        public void InsereRegistroIndividualNotAsync(LinxProdutosDetalhes registro, string tableName, string database)
        {
            string sql = @$"INSERT INTO {database}..{tableName}_raw 
                            ([lastupdateon], [portal], [cnpj_emp], [cod_produto], [cod_barra], [quantidade], [preco_custo], [preco_venda], [custo_medio],
                             [id_config_tributaria], [desc_config_tributaria], [despesas1], [qtde_minima], [qtde_maxima], [ipi], [timestamp], [custototal], 
                             [empresa]
                            ) 
                            Values 
                            (@lastupdateon, @portal, @cnpj_emp, @cod_produto, @cod_barra, @quantidade, @preco_custo, @preco_venda, @custo_medio,
                             @id_config_tributaria, @desc_config_tributaria, @despesas1, @qtde_minima, @qtde_maxima, @ipi, @timestamp, @custototal, 
                             @empresa
                            )";

            try
            {
                _linxMicrovixRepositoryBase.InsereRegistroIndividualNotAsync(tableName, sql, registro);
            }
            catch
            {
                throw;
            }
        }

        public async Task<IEnumerable<Company>> GetCompanysAsync(string tableName, string database)
        {
            string sql = $@"SELECT empresa as cod_company, nome_emp as name_company, cnpj_emp as doc_company FROM BLOOMERS_LINX..LinxLojas_trusted WHERE nome_emp LIKE '%MISHA%' or nome_emp LIKE '%OPEN%'";
            //string sql = $@"SELECT empresa as cod_company, nome_emp as name_company, cnpj_emp as doc_company FROM BLOOMERS_LINX..LinxLojas_trusted WHERE nome_emp = 'MISHA - ECOMMERCE' or nome_emp = 'OPEN ERA - ECOMMERCE'";

            try
            {
                return await _linxMicrovixRepositoryBase.GetCompanysAsync(tableName, sql);
            }
            catch
            {
                throw;
            }
        }

        public IEnumerable<Company> GetCompanysNotAsync(string tableName, string database)
        {
            string sql = $@"SELECT empresa as cod_company, nome_emp as name_company, cnpj_emp as doc_company FROM BLOOMERS_LINX..LinxLojas_trusted WHERE nome_emp LIKE '%MISHA%' or nome_emp LIKE '%OPEN%'";

            try
            {
                return _linxMicrovixRepositoryBase.GetCompanysNotAsync(tableName, sql);
            }
            catch
            {
                throw;
            }
        }

        public async Task<List<LinxProdutosDetalhes>> GetRegistersExistsAsync(List<LinxProdutosDetalhes> registros, string tableName, string database)
        {
            var identificadores = String.Empty;
            for (int i = 0; i < registros.Count(); i++)
            {
                if (i == registros.Count() - 1)
                    identificadores += $"'{registros[i].cod_produto}'";
                else
                    identificadores += $"'{registros[i].cod_produto}', ";
            }
            string query = $"SELECT cnpj_emp, cod_produto, timestamp FROM {database}.[dbo].{tableName} WHERE cod_produto IN ({identificadores})";

            try
            {
                return await _linxMicrovixRepositoryBase.GetRegistersExistsAsync(tableName, query);
            }
            catch
            {
                throw;
            }
        }

        public List<LinxProdutosDetalhes> GetRegistersExistsNotAsync(List<LinxProdutosDetalhes> registros, string tableName, string database)
        {
            var identificadores = String.Empty;
            for (int i = 0; i < registros.Count(); i++)
            {
                if (i == registros.Count() - 1)
                    identificadores += $"'{registros[i].cod_produto}'";
                else
                    identificadores += $"'{registros[i].cod_produto}', ";
            }
            string query = $"SELECT cnpj_emp, cod_produto, timestamp FROM {database}.[dbo].{tableName} WHERE cod_produto IN ({identificadores})";

            try
            {
                return _linxMicrovixRepositoryBase.GetRegistersExistsNotAsync(tableName, query);
            }
            catch
            {
                throw;
            }
        }

        public async Task CallDbProcMergeAsync(string procName, string tableName, string database)
        {
            try
            {
                await _linxMicrovixRepositoryBase.CallDbProcMergeAsync(procName, tableName, database);
            }
            catch
            {
                throw;
            }
        }

        public void CallDbProcMergeNotAsync(string procName, string tableName, string database)
        {
            try
            {
                _linxMicrovixRepositoryBase.CallDbProcMergeNotAsync(procName, tableName, database);
            }
            catch
            {
                throw;
            }
        }

        public async Task<IEnumerable<string>> GetProductsAsync(string tableName, string database, Company company)
        {
            //string sql = $@"select distinct cod_produto from BLOOMERS_LINX..LinxProdutos_trusted where desc_setor = 'GERAL'";

            //if (company.doc_company == "38367316000199")
            //    sql += "or desc_setor = 'MISHA'";
            //else if (company.doc_company == "42538267000268")
            //    sql += "or desc_setor = 'OPEN ERA'";

            return new List<string> {
                  "38"
, "67"
, "35"
, "40"
, "41"
, "82"
, "39"
, "56"
, "632"
, "189"
, "183"
, "182"
, "181"
, "180"
, "993"
, "989"
, "973"
, "198"
, "197"
, "196"
, "195"
, "192"
, "191"
, "446"
, "368"
, "367"
, "323"
, "281"
, "279"
, "556"
, "977"
, "945"
, "867"
, "832"
, "685"
, "626"
, "625"
, "619"
, "581"
, "956"
, "868"
, "658"
, "476"
, "461"
, "432"
, "431"
, "361"
, "280"
, "255"
, "243"
, "225"
, "211"
, "179"
, "178"
, "128"
, "591"
, "631"
, "325"
, "657"
, "127"
, "799"
, "682"
, "831"
, "596"
, "194"
, "162"
, "896"
, "1026"
, "1008"
, "1022"
, "9955"
, "9957"
, "9958"
, "9959"
, "9960"
, "9984"
, "1324"
, "1408"
, "1415"
, "1425"
, "1426"
, "1427"
, "1428"
, "1429"
, "1430"
, "1431"
, "1432"
, "1433"
, "1434"
, "1435"
, "1436"
, "1437"
, "1438"
, "1439"
, "1440"
, "1441"
, "1442"
, "1443"
, "1444"
, "1445"
, "1446"
, "4654"
, "4655"
, "4656"
, "4657"
, "4658"
, "4659"
, "4660"
, "4666"
, "4705"
, "4714"
, "4715"
, "4746"
, "4747"
, "4748"
, "4749"
, "1229"
, "1214"
, "1206"
, "1194"
, "1193"
, "1177"
, "1176"
, "4706"
, "4366"
, "4367"
, "4362"
, "4363"
, "4364"
, "4365"
, "1192"
, "1175"
, "1174"
, "4707"
, "4711"
, "4722"
, "4353"
, "4703"
, "4358"
, "4359"
, "4361"
, "4780"
, "1025"
, "1021"
, "1447"
, "1448"
, "1493"
, "1494"
, "1495"
, "1496"
, "1497"
, "1498"
, "1499"
, "1500"
, "1501"
, "1502"
, "1451"
, "1452"
, "1453"
, "1454"
, "1455"
, "1456"
, "1457"
, "1458"
, "1459"
, "1460"
, "1461"
, "1462"
, "1463"
, "1464"
, "1465"
, "1466"
, "1467"
, "1468"
, "1469"
, "2864"
, "2908"
, "2910"
, "2911"
, "2912"
, "2950"
, "2930"
, "2931"
, "2932"
, "2933"
, "3026"
, "3027"
, "2951"
, "2952"
, "2953"
, "2954"
, "2955"
, "2956"
, "2957"
, "2958"
, "2959"
, "2960"
, "4712"
, "3142"
, "3143"
, "3144"
, "3150"
, "3384"
, "3385"
, "3386"
, "3387"
, "3388"
, "3389"
, "3390"
, "3391"
, "3392"
, "3393"
, "3394"
, "3395"
, "3396"
, "3397"
, "3380"
, "3398"
, "3399"
, "3400"
, "3401"
, "3402"
, "3403"
, "3404"
, "1449"
, "1450"
, "1503"
, "1504"
, "1505"
, "1506"
, "1507"
, "1508"
, "1509"
, "1510"
, "1511"
, "1512"
, "1513"
, "1514"
, "1515"
, "1516"
, "1517"
, "1518"
, "1519"
, "1520"
, "1521"
, "1522"
, "1523"
, "1524"
, "1525"
, "1526"
, "1527"
, "1528"
, "1470"
, "1471"
, "1472"
, "1473"
, "1474"
, "1475"
, "1476"
, "1477"
, "1478"
, "1479"
, "1480"
, "1481"
, "1482"
, "1483"
, "1484"
, "1485"
, "1486"
, "1487"
, "1488"
, "1489"
, "1490"
, "1491"
, "1492"
, "3775"
, "1826"
, "3757"
, "1844"
, "1871"
, "1872"
, "1870"
, "3405"
, "3406"
, "3407"
, "3408"
, "3409"
, "3538"
, "3539"
, "3540"
, "3541"
, "3542"
, "3543"
, "3544"
, "3545"
, "3546"
, "3547"
, "3548"
, "3549"
, "3550"
, "3551"
, "3552"
, "3553"
, "3554"
, "3531"
, "3532"
, "3555"
, "3556"
, "3557"
, "3558"
, "3559"
, "3560"
, "3561"
, "3562"
, "3563"
, "3536"
, "3537"
, "3605"
, "3606"
, "3608"
, "3607"
, "3609"
, "3610"
, "3689"
, "3687"
, "3690"
, "3678"
, "3698"
, "3699"
, "3700"
, "3701"
, "3710"
, "3711"
, "3712"
, "3713"
, "3692"
, "4630"
, "3767"
, "3768"
, "3769"
, "3770"
, "3772"
, "3773"
, "3774"
, "3779"
, "3780"
, "3781"
, "3782"
, "4619"
, "4622"
, "4508"
, "4509"
, "4510"
, "4511"
, "4637"
, "4638"
, "4639"
, "4643"
, "4644"
, "4645"
, "4704"
, "4713"
, "4651"
, "4652"
, "4653"
, "4720"
, "4623"
, "4618"
, "4620"
, "4629"
, "4721"
, "4646"
, "6864"
, "6865"
, "6866"
, "6867"
, "7004"
, "7089"
, "7090"
, "7091"
, "7092"
, "7093"
, "4778"
, "4779"
, "4782"
, "4783"
, "4784"
, "4785"
, "4786"
, "4789"
, "4795"
, "4796"
, "4797"
, "4802"
, "4803"
, "4857"
, "7201"
, "7202"
, "7867"
, "7843"
, "7868"
, "7869"
, "7870"
, "7871"
, "7872"
, "7873"
, "7874"
, "7875"
, "7876"
, "7877"
, "7878"
, "7889"
, "7888"
, "7887"
, "7886"
, "7885"
, "7884"
, "7883"
, "7882"
, "7881"
, "7880"
, "7879"
, "7922"
, "7923"
, "7924"
, "7925"
, "7926"
, "7927"
, "7928"
, "7929"
, "7930"
, "7931"
, "7932"
, "7933"
, "7934"
, "7935"
, "7936"
, "7937"
, "7938"
, "7939"
, "7940"
, "7941"
, "7942"
, "7943"
, "7944"
, "7945"
, "7946"
, "7947"
, "7948"
, "7949"
, "7950"
, "7951"
, "7952"
, "7953"
, "7954"
, "7955"
, "7956"
, "7957"
, "7958"
, "7959"
, "7960"
, "7961"
, "7962"
, "7963"
, "7964"
, "7965"
, "7966"
, "7967"
, "7968"
, "7969"
, "7970"
, "7971"
, "7972"
, "7973"
, "7974"
, "7975"
, "7976"
, "7977"
, "7978"
, "7979"
, "7980"
, "7981"
, "7982"
, "7983"
, "7984"
, "7985"
, "7986"
, "7987"
, "7988"
, "7989"
, "7990"
, "7991"
, "7992"
, "7993"
, "7994"
, "7995"
, "7996"
, "7997"
, "7998"
, "7999"
, "8000"
, "8001"
, "8002"
, "8003"
, "8004"
, "8005"
, "8006"
, "8007"
, "8008"
, "8009"
, "8010"
, "8011"
, "8012"
, "8013"
, "8014"
, "8015"
, "8016"
, "8017"
, "8018"
, "8019"
, "8020"
, "8021"
, "8022"
, "8023"
, "8024"
, "8025"
, "8026"
, "8027"
, "8028"
, "8029"
, "8030"
, "8031"
, "8032"
, "8033"
, "8034"
, "8035"
, "8036"
, "8037"
, "8038"
, "8039"
, "8040"
, "8041"
, "8042"
, "8043"
, "8044"
, "8045"
, "8046"
, "8047"
, "8048"
, "8049"
, "8050"
, "8051"
, "8052"
, "8053"
, "8054"
, "8055"
, "8056"
, "8057"
, "7890"
, "7891"
, "7892"
, "7893"
, "7894"
, "7895"
, "7896"
, "7897"
, "7898"
, "7899"
, "7900"
, "8087"
, "8088"
, "5071"
, "5072"
, "5073"
, "5074"
, "5151"
, "5152"
, "5147"
, "5148"
, "5149"
, "5150"
, "5897"
, "5076"
, "5064"
, "5065"
, "5077"
, "5088"
, "5089"
, "5090"
, "5091"
, "5092"
, "5093"
, "5094"
, "5095"
, "5096"
, "5097"
, "5098"
, "5099"
, "5084"
, "5085"
, "5086"
, "5087"
, "5100"
, "5101"
, "5102"
, "5123"
, "5124"
, "5125"
, "5126"
, "5127"
, "5128"
, "5129"
, "5130"
, "5131"
, "5132"
, "5133"
, "5134"
, "5135"
, "5136"
, "5137"
, "5138"
, "5139"
, "5140"
, "5141"
, "5142"
, "5143"
, "5144"
, "5145"
, "5146"
, "5394"
, "5546"
, "5547"
, "5471"
, "5473"
, "5474"
, "5469"
, "5470"
, "5475"
, "5476"
, "5477"
, "5478"
, "5479"
, "5480"
, "5483"
, "5484"
, "5486"
, "5802"
, "5805"
, "5806"
, "5807"
, "5808"
, "5809"
, "5810"
, "5811"
, "5812"
, "5813"
, "5815"
, "5819"
, "5820"
, "5814"
, "5816"
, "5817"
, "5822"
, "5823"
, "5828"
, "5830"
, "5831"
, "5838"
, "5839"
, "5840"
, "5841"
, "5842"
, "5843"
, "5844"
, "5845"
, "5846"
, "5847"
, "5848"
, "5849"
, "5832"
, "5833"
, "5834"
, "5835"
, "6510"
, "6042"
, "6043"
, "6044"
, "6164"
, "6165"
, "6166"
, "6167"
, "6135"
, "6159"
, "6160"
, "6155"
, "6156"
, "6157"
, "6158"
, "7288"
, "7285"
, "7286"
, "7287"
, "7341"
, "7368"
, "6305"
, "6310"
, "6312"
, "6316"
, "6317"
, "6319"
, "6322"
, "6325"
, "6326"
, "6327"
, "6331"
, "6461"
, "6462"
, "6467"
, "6382"
, "6383"
, "6384"
, "6386"
, "6385"
, "6387"
, "6388"
, "6389"
, "6485"
, "7544"
, "7546"
, "7567"
, "7568"
, "7604"
, "7605"
, "7606"
, "7622"
, "7623"
, "7687"
, "7723"
, "7700"
, "7701"
, "7703"
, "7699"
, "7704"
, "7705"
, "7730"
, "7901"
, "7902"
, "7903"
, "7904"
, "7905"
, "7906"
, "7907"
, "7908"
, "7909"
, "7910"
, "7911"
, "7912"
, "7913"
, "7914"
, "7915"
, "7916"
, "7917"
, "7918"
, "7919"
, "7920"
, "7921"
, "7835"
, "7836"
, "7837"
, "7838"
, "7839"
, "7840"
, "7841"
, "7842"
, "7844"
, "7845"
, "7846"
, "7847"
, "7848"
, "7849"
, "7850"
, "7851"
, "7852"
, "7853"
, "7854"
, "7855"
, "7856"
, "7857"
, "7858"
, "7859"
, "7860"
, "7861"
, "7862"
, "7863"
, "7864"
, "7865"
, "7866"
, "8093"
, "8094"
, "8095"
, "8096"
, "8237"
, "8238"
, "8239"
, "8240"
, "8241"
, "8242"
, "8243"
, "8244"
, "8245"
, "8246"
, "8247"
, "8250"
, "8154"
, "8148"
, "8251"
, "8252"
, "8253"
, "8254"
, "8255"
, "8256"
, "8257"
, "8258"
, "8259"
, "8260"
, "8261"
, "8262"
, "8263"
, "8264"
, "8265"
, "8266"
, "8267"
, "8268"
, "8269"
, "8270"
, "8271"
, "8272"
, "8273"
, "8274"
, "9247"
, "9246"
, "8275"
, "8276"
, "8277"
, "8278"
, "8279"
, "8280"
, "8281"
, "8282"
, "8283"
, "8284"
, "8285"
, "8286"
, "8287"
, "8288"
, "8289"
, "8290"
, "8291"
, "8449"
, "8517"
, "8466"
, "8467"
, "8468"
, "8469"
, "8470"
, "8471"
, "8472"
, "8473"
, "8474"
, "8475"
, "8476"
, "8477"
, "8478"
, "8479"
, "8480"
, "8481"
, "8482"
, "8483"
, "8484"
, "8485"
, "8486"
, "8487"
, "8488"
, "8489"
, "8490"
, "8491"
, "8492"
, "8493"
, "8494"
, "8495"
, "8496"
, "8497"
, "8498"
, "8499"
, "8500"
, "8501"
, "8502"
, "8503"
, "8504"
, "8505"
, "8506"
, "8507"
, "8508"
, "8509"
, "8510"
, "8511"
, "8512"
, "8513"
, "8514"
, "8515"
, "8516"
, "8620"
, "8621"
, "8666"
, "8667"
, "8761"
, "8762"
, "8680"
, "8959"
, "8918"
, "8920"
, "8919"
, "8921"
, "8922"
, "8923"
, "8924"
, "8925"
, "8949"
, "9147"
, "9148"
, "9149"
, "9079"
, "9154"
, "9178"
, "9179"
, "9180"
, "9181"
, "9182"
, "9144"
, "9145"
, "9146"
, "9183"
, "9184"
, "9169"
, "9168"
, "9170"
, "9171"
, "9172"
, "9173"
, "9174"
, "9175"
, "9176"
, "9177"
, "9185"
, "9186"
, "9188"
, "9189"
, "9190"
, "9206"
, "9208"
, "9253"
, "9258"
, "9261"
, "9262"
, "9263"
, "9264"
, "9265"
, "9231"
, "9233"
, "9266"
, "9267"
, "9268"
, "9269"
, "9270"
, "9271"
, "9272"
, "9273"
, "9274"
, "9275"
, "9276"
, "9277"
, "9278"
, "9279"
, "9280"
, "9281"
, "9282"
, "9283"
, "9284"
, "9285"
, "9286"
, "9341"
, "9342"
, "9339"
, "9340"
, "9343"
, "9344"
, "9345"
, "9346"
, "9347"
, "9348"
, "9349"
, "9350"
, "9543"
, "9544"
, "12891"
, "12893"
, "12894"
, "12846"
, "12845"
, "12892"
, "10711"
, "11900"
, "11901"
, "11937"
, "11938"
, "11939"
, "11943"
, "11944"
, "11945"
, "11946"
, "11947"
, "11948"
, "11950"
, "11953"
, "11954"
, "11955"
, "11957"
, "11960"
, "11940"
, "11941"
, "11942"
, "11949"
, "11951"
, "11952"
, "11956"
, "11958"
, "11959"
, "12143"
, "10384"
, "10383"
, "10364"
, "10363"
, "10362"
, "10361"
, "10360"
, "10359"
, "10358"
, "10357"
, "10356"
, "10355"
, "10354"
, "10353"
, "10352"
, "10351"
, "10350"
, "10349"
, "10348"
, "10347"
, "10346"
, "10345"
, "10368"
, "10593"
, "10816"
, "10800"
, "10644"
, "10964"
, "10965"
, "10966"
, "10955"
, "11044"
, "11046"
, "11186"
, "11185"
, "11187"
, "11188"
, "11189"
, "11359"
, "10302"
, "10293"
, "10267"
, "10266"
, "10265"
, "10264"
, "10263"
, "10262"
, "10261"
, "10260"
, "10259"
, "10258"
, "10257"
, "10256"
, "10255"
, "10254"
, "10253"
, "10252"
, "10250"
, "10249"
, "10248"
, "12133"
, "12134"
, "12136"
, "12135"
, "12132"
, "10247"
, "100056"
, "100038"
, "100162"
, "100127"
, "100041"
, "100040"
, "100039"
, "100035"
, "100082"
, "100067"
, "100128"
                };

            try
            {
                //return await _linxMicrovixRepositoryBase.GetProductsAsync(tableName, sql);
            }
            catch
            {
                throw;
            }
        }
    }
}
